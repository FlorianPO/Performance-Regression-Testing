#+TAGS: Phoronix(P) Pypy(Y) Expo(A) Execo(B) XPFlow(C) 

* Jeudi 19/05
  - Installation de Débian8 avec Vincent Danjean
  - Mise en place de l'environnement de travail (quelques raccourcis
    qui me sont chers, des marque-pages, un Git:
    https://github.com/FlorianPO/Performance-Regression-Testing)
  - Il faut que je fournisse mon adresse MAC à Christian afin d'avoir
    Internet en filaire (très peu de Wifi dans la salle)
  - Prise en main de Org-mode sous emacs
* Lundi 23/05
  - [[https://github.com/FlorianPO/Performance-Regression-Testing/blob/master/Phoronix.org][Overview de Phoronix]] : dépendant du matériel, deux tests n'auront
    du sens que s'ils sont éxecutés sur la /même/ machine.
  - [[https://github.com/FlorianPO/Performance-Regression-Testing/blob/master/CollectiveMind.org][Overview de CollectiveMind]] : plus proche du sujet (axé recherche)
  - [[https://github.com/FlorianPO/Performance-Regression-Testing/blob/master/Jenkins.org][Overview de Jenkins]]

  Ces documents ne sont qu'une ébauche, il conviendra à l'avenir de
  s'intéresser à leur points communs/différences. En première
  approximation, les benchmarks proposés dépendent de la machine qui
  les a générés (à l'exception de CollectiveMind qui semble
  s'intéresser au problème). Néanmoins, ces trois plateformes sont des
  /usines à gaz/, il reste encore énormément à découvrir.
* Mardi 24/05
  - Uniformisation des .org. L'objectif est de comparer les 3
    plateformes sur le benchmarking.
  - Ajout d'un [[https://github.com/FlorianPO/Performance-Regression-Testing/blob/master/State_of_the_art.org][rapport]] /très bref/ sur l'état de l'art. Il convient d'en
    discuter.
  - Réunion avec Arnaud Legrand : creuser les outils pour voir s'ils
    correspondent au besoin (benchmarks propres, possibilité de
    récupérer les données pour une exploitation spécifique, un peu de
    contrôle d'expérience, technologie pérenne). + utiliser Marker
    pour le journal.
  - S'occuper de Pypy, ...
  - Tester Phoronix
  - Installation de Phoronix Test Suite v6.2.1
* Mercredi 25/05						     :ATTACH:
** Phoronix							   :Phoronix:
 :PROPERTIES:
  :Attachments: FirstTest.png SecondTest.png
  :ID:       d5f63874-eef8-49c2-b544-2f7391cd499d
  :END:
   + Premier test avec Phoronix -> rbenchmark -> failed to run properly
   + Deuxième test avec Phoronix -> 7zip compression -> ok
   + Présence de tests multicoeurs
   + L'injection de charges semble possible (see Fulldoc : "stressing
     your system with random workloads") même si ce n'est pas
     l'objectif premier (cf- Vincent)
   + Possibilité d'exporter les données collectées
   + L'interface semble simple à utiliser (même si je n'y suis pas
     arrivé (pour le moment))
   + S'intéresser aux tests eux-même (comment les écrire, etc...)
** Pypy								       :Pypy:
   http://speed.pypy.org/timeline/#/?exe=3,6,1,5&base=2+472&ben=ai&env=1&revs=200&equid=off
   + Fait avec Django (Framework Web python) et Codespeed (Web
     benchmark application) -> à regarder, semble intéressant !
   + Code des benchmarks :
     https://bitbucket.org/pypy/benchmarks/src/846fa56a282b/unladen_swallow/performance/
    
* Jeudi 26/05							       
** Codespeed							       :Pypy:
   https://github.com/tobami/codespeed
   - Problème d'installation (Python invalid syntax (?))
   - La commande magique : =python ./manage.py syncdb --migrate=
   - Serveur lancé : problème d'authentification cependant
   - Il faut créer un super-utilisateur : =python manage.py
     createsuperuser=
   - Lancer le serveur en _sudo_ : =sudo python manage.py runserver 8000=
   - Fournir Codespeed en données : "Codespeed is a web application to
     monitor and analyze the performance of your code" -> seulement de
     la visualisation de données
** Phoronix 							   :Phoronix:
   Résultats des tests dans
   =~/.phoronix-test-suite/test-results/<TEST>/= :
     - =composite.xml= :: : plan d'expérience
     - =system-logs/= :: : 2 tonnes de données collectées
   Méta-données des tests (par défault) dans
   =~/.phoronix-test-suite/test-profiles/pts/<TEST>/=

* Vendredi 27/05
** Phoronix							   :Phoronix:
   - Ecriture d'un bubble sort en python pour tester Phoronix,
     téléchargeable à
     https://github.com/FlorianPO/Performance-Regression-Testing/raw/master/bubble_sort.py.tar.gz
   - Ecriture des méta-données du test (à tester, ne marchera sûrement
     pas du premier coup)
*** Bubble sort TEST
    - placer le test dans :
      =~/.phoronix-test-suite/test-profiles/local/<TEST>/= (celui-ci
      devrait être visible par la commande =phoronix-test-suite
      list-available-tests=
    - il faut générer un checksum MD5 de l'archive à télécharger :
      =md5sum <FILE>= (à placer dans =download.xml=)
    - problème d'éxecutable :
      - le script généré dans install.sh doit avoir le même nom
        =<TEST-NAME>= que le dossier du test =local/<TEST-NAME>=
* Lundi 30/05
** Phoronix							   :Phoronix:
   - Output template : la sortie du programme semble devoir
     correspondre à l'OutputTemplate dans =results-definition.xml=
   - Update : la correspondance doit être exacte (sauf certains cas
     (ex: en C les retours chariot semble ignorés), à étudier...)
   - https://www.phoronix.com/forums/forum/phoronix/phoronix-test-suite/46913-custom-benchmark
*** Multiple results
    - Multiplier les champs =OutputTemplate= dans =results-definition.xml= ne suffit pas...
    - Ce n'est pas possible...
    - Regarder dans le code source -> hardcore
** Autres pistes
   - Execo, XPFlow, Expo
   - Regarder Webinar n°2 + état de l'art de ces outils (voir slide)
     - Regardé jusqu'à 35 min (partie 6)
* Mardi 31/05
** Expo								       :Expo:
*** Intro
    It aims at simplifying the experimental process on such
    distributed platforms. Works with client / server.
    - Liens :
      + http://expo.gforge.inria.fr/
    - Pros :
      + Everything is logged : IO, commands, date, ...
*** Avancement
    - Installation de Ruby
    - Installation de gem2.1
    - Problème de version : Expo et ses dépendances utilisent Ruby
      1.9.3 (current version : Ruby 2.3)
    - Installation de RVM pour installer / switcher Ruby 1.9.3
      + https://rvm.io/rvm/install 
      + http://stackoverflow.com/questions/9919739/how-to-use-the-older-version-of-ruby-1-9-2
      + Pour utiliser la commande =rvm= : =source
        /home/<USER>/.rvm/scripts/rvm= (<USER> : florian)
      + Pour switcher sur Ruby 1.9.3 : =rvm use ruby-1.9.3 --default=
    - Petit tuto Ruby : http://tryruby.org/levels/1/challenges/0
    - Impossible de lancer =./expo= -> problème syntaxe -> passage en
      Ruby 2.3.1
      + IMPOSSIBLE, rien ne marche
      + Expo utilise Ruby 1.8.7 mais Restfully nécessite Ruby >= 1.9.3
** XPFlow							     :XPFlow:
*** Intro
    XPFlow is a new approach to description and execution of
    experiments involving large-scale computer installations. The main
    idea consists in describing the experiment as workflow and using
    achievements of Business Workflow Management to reliably and
    efficiently execute it. Moreover, to facilitate the design
    process, the framework provides abstractions that hide unnecessary
    complexity from the user.
    - Liens:
      + http://xpflow.gforge.inria.fr/
      + http://xpflow.gforge.inria.fr/img/slides/slides.pdf
	* http://xpflow.gforge.inria.fr/img/slides/slides.pdf
*** Avancement
    - Installation de XPFlow
    - Lecture des slides : pas dégueux du tout
    - Permet de lancer des commandes systèmes, etc...
    - Installation de =cairo= : =gem install cairo= (pour exporter en pdf)
      + permet de visualiser le workflow
    - A tester avec Grid5000 -> demande de compte faite.
** Execo							      :Execo:
*** Intro
    Execo is a Python library that allows you to finely manage unix
    processes on thousands of remote hosts. It is well designed for :
    - prototyping experiments on distributed systems (Grid5000
      support)
    - automatize admin tasks
    - create reproducible experiments
    - Liens :
      + http://execo.gforge.inria.fr/doc/latest-stable/
      + http://execo.gforge.inria.fr/doc/latest-stable/userguide.html
*** Avancement
    - Installation de Execo et de tous ses packages optionnels.
* Mercredi 01/06
** Execo							      :Execo:
  - Obtention d'un compte Grid5000
  - Lecture de la doc d'Execo
  - A faire : comparer Execo et XPFlow
** XPFlow							     :XPFlow:
   - Liste des patterns : http://xpflow.gforge.inria.fr/docs/patterns/ :
     super cool !
   - =git clone= du projet
   - Installation de LaTeX-mk pour générer la doc
   - Recherche de la structure du pattern =info= : classe InfoRun dans
     runs.rb (peu de choses...)
* Mardi 07/06
  - Visionnage des webinars 2 et 3
  - Contacter Olivier Richard et Michael Mercier au sujet de
    l'installation d'environnement. XPFlow mélange celui-ci et le
    contrôle de l'expérience : pas une bonne idée.
* Mercredi 08/06
  - Installation de =emacs= sur Windows (=C-H v user-init-file RET= dans
    emacs pour trouver l'emplacement du fichier =.emacs=)  
  - Visionnage du webinar 1 + [[https://github.com/FlorianPO/Performance-Regression-Testing/blob/master/Webinar_1.org][prise de note]]
* Jeudi 09/06
  - Visionnage du webinar 2 + prise de note
